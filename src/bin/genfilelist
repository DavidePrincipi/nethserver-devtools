#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 1999-2003 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
# Technical support for this program is available from Mitel Networks 
# Please visit our web site www.mitel.com/sme/ for details.
#----------------------------------------------------------------------
use strict;
use Errno;
use File::Find;
use File::Basename;
sub process;

sub usage
{
    die "t [--ignoredir dir] [--dir dir spec] [--file file spec] root\n";
}

my @ignoredirs = (qw(
));

%::ignoredirs = map { $_ => 1 } @ignoredirs;

%::dirperms = (
);

%::fileperms = (
'/sbin/e-smith/' => "%attr(0554,root,root)",
'/etc/e-smith/events/actions/' => "%attr(0554,root,root)",
);

my $startdirectory = undef;
while (my $arg = shift)
{
    if ($arg eq "--ignoredir")
    {
        my $arg = shift;
        usage() unless (defined $arg);
        $::ignoredirs{$arg} = 1;
    }
    elsif ($arg eq "--dir")
    {
        my $dir = shift;
        my $spec = shift;
        usage() unless (defined $dir && defined $spec);
	die "Can't override permissions already specified\n"
	    if exists $::dirperms{$dir};
        $::dirperms{$dir} = '%' . $spec;
    }
    elsif ($arg eq "--file")
    {
        my $file = shift;
        my $spec = shift;
        usage() unless (defined $file && defined $spec);
	die "Can't override permissions already specified\n"
	    if exists $::fileperms{$file};
        $::fileperms{$file} = '%' . $spec;
    }
    else
    {
	$startdirectory = $arg;
    }
}

defined $startdirectory
    or die "Must give directory arg";

# Change to the build root directory
chdir $startdirectory
    or die "Could not chdir to $startdirectory: $!\n";

# Now go and process all the files...
find(\&::process, '.');

exit (0);

sub process
{
    my $path = $File::Find::name;

    # Remove leading .
    $path =~ s/^.//;

    if (-d)
    {
        if(defined $::ignoredirs{$path}) {
            print "# ignore dir $path\n";

        } elsif(defined $::dirperms{$path}) {
            print "%dir $::dirperms{$path} $path\n";

        } elsif( ! scalar map {$_} <$startdirectory/$path/*>) {
            print "%dir %attr(0755,root,root) $path\n";
        } elsif($path =~ m:^/etc/e-smith/db/.+/defaults/: && -f "$startdirectory/$path/type") {
            # Take ownership of DB defaults directory
            print "%dir %attr(0755,root,root) $path\n";

        } else {
            print "# skipped dir $path\n";
        }

    }
    elsif (-f)
    {
	# Ignore .orig files created in prep section
	return if $path =~ m{\.orig$};

        my (@paths) = ($path);

        # Add compiled python files
        push @paths, "${path}c" if $path =~ m{\.py$};
        push @paths, "${path}o" if $path =~ m{\.py$};

        foreach $path (@paths) {
            # Some files get special permissions and ownership
            my $dir = (dirname $path) . '/';

            # Special permissions per file
            if (defined $::fileperms{$path})
            {
                print "$::fileperms{$path} ";
            }
            # Special permissions or per containing directory
            elsif (defined $::fileperms{$dir})
            {
                print "$::fileperms{$dir} ";
            }
            print "$path\n";
        }
    }
    else
    {
	print "$path\n";
    }
}
